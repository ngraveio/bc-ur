// import { Tagged } from "cbor";
// import { languages } from "./LanguageCodes";
// import { RegistryItem, RegistryItem2 } from "./RegistryItem";

// /** CDDL
//  *
//  * metadata = {
//  * 		? sync_id: bytes .size 16     ; Generated by the hardware wallet to identify
//  * the device
//  * 		? language: language_code,    ; Indicates the selected language selected
//  * on the hardware wallet
//  * 		? fw_version: string,         ; Firmware version of the hardware wallet
//  * 		? device: string              ; Indicates the device name
//  * 		* tstr => any                 ; Extendable new metadata
//  * }
//  *
//  *
//  * language_code = string ; following [ISO 639-1] Code (e.g. "en" for English,
//  * "fr" for French, "nl" for Dutch and "es" for Spanish
//  *
//  */

// interface ICryptoPortfolioMetadata {
//   syncId?: Buffer; // Size 16
//   languageCode?: keyof typeof languages; // ISO 639-1 language codes
//   firmwareVersion?: string;
//   device?: string;
//   [key: string]: any;
// }

// /**
//  * Example implementation of a RegistryItem
//  */
// export class CryptoPortfolioMetadata extends RegistryItem {
//   constructor(private metadata: ICryptoPortfolioMetadata = {}) {
//     super("crypto-portfolio-metadata", 1404, metadata);

//     // If language code is incorrect, throw error
//     if (metadata.languageCode && !languages[metadata.languageCode]) {
//       throw new Error("Invalid language code");
//     }

//     // sync id buffer size must be maximum 16 otherwise throw error
//     if (metadata.syncId && metadata.syncId.length > 16) {
//       throw new Error("Sync id buffer size must be maximum 16");
//     }

//     // TODO: make firmware version valid SemVer
//   }

//   public getSyncId = () => {
//     // should pad the left of the buffer with 0 if smaller than 16
//     if (this.metadata.syncId) {
//       return Buffer.concat([
//         Buffer.alloc(16 - this.metadata.syncId.length),
//         this.metadata.syncId,
//       ]);
//     }
//   };

//   public getLanguageCode = () => this.metadata.languageCode;
//   public getFirmwareVersion = () => this.metadata.firmwareVersion;
//   public getDevice = () => this.metadata.device;

//   public getData = () => {
//     const clone = { ...this.metadata };

//     // Remove undefined values
//     Object.keys(clone).forEach(
//       (key) => clone[key] === undefined && delete clone[key]
//     );
//     return clone;
//   };

//   encodeCBOR = (encoder) => {
//     let padRemovedSyncId = this.metadata.syncId;
//     // Remove starting zeros from sync id buffer
//     while (padRemovedSyncId && padRemovedSyncId[0] === 0) {
//       padRemovedSyncId = padRemovedSyncId.slice(1);
//     }

//     const tagged = new Tagged(1404, {
//       syncId: padRemovedSyncId,
//       languageCode: this.metadata.languageCode,
//       firmwareVersion: this.metadata.firmwareVersion,
//       device: this.metadata.device,
//     });
//     return encoder.pushAny(tagged);
//   };

//   public fromCBOR = () => ({
//     1404: (val) => {
//       const { syncId, languageCode, firmwareVersion, device } = val;
//       return new CryptoPortfolioMetadata({
//         syncId,
//         languageCode,
//         firmwareVersion,
//         device,
//       });
//     },
//   });
// }
